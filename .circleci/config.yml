version: 2.1

orbs:
  slack: circleci/slack@4.4.2
           
jobs:
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "Notification for the build",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
          
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
      - slack/notify:
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
      - slack/notify:
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: test-frontend
          command: |
              cd frontend
              npm i
              npm install
              npm build
              npm install oauth-sign
              npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: test-backend
          command: |
              cd backend
              npm i
              npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: test-backend
          command: |
              cd backend
              npm i
              npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: test-backend
          command: |
              cd backend
              npm i
              npm audit fix --audit-level=critical --force
              
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=circleci94 \
               --stack-name "backendstack-circleci94" \
               --parameter-overrides ID="circleci94"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=circleci94 \
              --stack-name "frontendstack-circleci94" \
              --parameter-overrides ID="circleci94"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure  

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["eb:8c:c3:a9:4b:36:3f:c7:69:df:e2:36:d3:22:f5:ed"]
      - attach_workspace:
          at: /root
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            echo "NODE_ENV=local" >> .circleci/backend/.env
            echo "VERSION=1" >> .circleci/backend/.env
            echo ${ENVIRONMENT} >> .circleci/backend/.env
            echo ${TYPEORM_CONNECTION} >> .circleci/backend/.env
            echo ${TYPEORM_ENTITIES} >> .circleci/backend/.env
            echo ${TYPEORM_HOST} >> .circleci/backend/.env
            echo ${TYPEORM_PORT} >> .circleci/backend/.env
            echo ${TYPEORM_USERNAME} >> .circleci/backend/.env
            echo ${TYPEORM_PASSWORD} >> .circleci/backend/.env
            echo ${TYPEORM_DATABASE} >> .circleci/backend/.env
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure   
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run build
            npm run migrations
            echo "has been done successfully" > result.txt
      - run:
          name: Send migration results to memstash
          command: |
            if [ "$(grep -c "has been done successfully" result.txt)" -ge 3 ]; then curl -H "Content-Type: text/plain" -H "token: 1923c2c7-45cc-47b6-983f-d027069a3d6c" --request PUT --data "1" https://api.memstash.io/values/migrations-circleci94        
     # Here's where you will add some code to rollback on failure 
            

workflows:
  default:
    jobs:
      - build-frontend:
          context: udapeople
      - build-backend:
          context: udapeople
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]